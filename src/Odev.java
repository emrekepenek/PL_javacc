/* Odev.java */
/* Generated By:JavaCC: Do not edit this line. Odev.java */
import java.util.*;
import java.io.*;
public class Odev implements OdevConstants {
    public static ArrayList<Node> places = new ArrayList<Node>();
    public static void main(String args[]) throws ParseException
    {

        try {
        Odev parser = new Odev(System.in);
        parser.ETU_TVL_Language();

       }
               catch(ParseException e) {
                   System.err.println("[PARSING EXCEPTION] Invalid Input");
                   System.exit(0);
               }
    }

  static final public void ETU_TVL_Language() throws ParseException, ParseException {
    jj_consume_token(PROGRAM);
    ID();
    jj_consume_token(SEMIC);
    DeclarationSection();
    InitializationSection();
    MainSection();
  }

  static final public void ID() throws ParseException {
    jj_consume_token(ID);
  }

  static final public void DeclarationSection() throws ParseException, ParseException {
    jj_consume_token(23);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      VariableNameList();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(SEMIC);
  }

  static final public void InitializationSection() throws ParseException {
    jj_consume_token(24);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      InitList();
      jj_consume_token(SEMIC);
    }
  }

  static final public void MainSection() throws ParseException {
    jj_consume_token(MAINSECTION);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INPUT:
      case OUTPUT:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      Statement();
      jj_consume_token(SEMIC);
    }
  }

  static final public void VariableNameList() throws ParseException, ParseException {String x ="";
Token y =null;
 Node temp;
    y = jj_consume_token(ID);
x=y.image;
            temp = new Node();
            temp.isim=x;
            temp.value="UNKNOWN";
            places.add(temp);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      y = jj_consume_token(ID);
x=y.image;

               temp = new Node();
               temp.isim=x;
               temp.value="UNKNOWN";
               for(int i=0 ; i<places.size();i++){
                   if(places.get(i).isim.equals(x)){
                       {if (true) throw new ParseException();}
                   }
               }
               places.add(temp);
    }
  }

  static final public String VariableName() throws ParseException {Token y;
String x;
    y = jj_consume_token(ID);
x=y.image;
    {if ("" != null) return x;}
    throw new Error("Missing return statement in function");
  }

  static final public void InitList() throws ParseException {String x ="";
Token y =null;
 Node temp;
    y = jj_consume_token(ID);
x=y.image;
                temp = new Node();
                for(int i=0 ; i<places.size();i++){
                   if(places.get(i).isim.equals(x)){
                      temp=places.get(i);
                  }
                }
    jj_consume_token(ASSIGN);
    x = LogicalValue();
temp.value=x;
  }

  static final public String LogicalValue() throws ParseException {Token x;
    String y = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        x = jj_consume_token(TRUE);
y = x.image;
        break;
        }
      case FALSE:{
        x = jj_consume_token(FALSE);
y = x.image;
        break;
        }
      case UNKNOWN:{
        x = jj_consume_token(UNKNOWN);
y = x.image;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.err.println("[PARSING ERROR] Invalid input");
        System.exit(0);
    }
{if ("" != null) return y ;}
    throw new Error("Missing return statement in function");
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INPUT:{
      InputStmt();
      break;
      }
    case OUTPUT:{
      OutputStmt();
      break;
      }
    case ID:{
      BoolAssignmentStmt();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void InputStmt() throws ParseException {
    jj_consume_token(INPUT);
    jj_consume_token(message);
    VariableName();
  }

  static final public void OutputStmt() throws ParseException {String x="";
String y="";
Token z=null;
    jj_consume_token(OUTPUT);
    z = jj_consume_token(message);
    x = BoolExpression();
y=z.image;
    System.out.println(z+" "+x);
  }

  static final public void BoolAssignmentStmt() throws ParseException {String x ="";
String y ="yunus";
 Node temp=null;
    x = VariableName();
for(int i=0 ; i<places.size();i++){
            if(places.get(i).isim.equals(x)){
                temp=places.get(i);
            }
        }
    jj_consume_token(ASSIGN);
    y = BoolExpression();
temp.value=y;
  }

  static final public String BoolExpression() throws ParseException {String x ="";
String y ="";
String sonuc="";
    try {
      x = BoolExpressionAlpha();
sonuc=x;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        jj_consume_token(OR);
        y = BoolExpressionAlpha();
      }
if(x.equals("TRUE")&&y.equals("TRUE")){
                sonuc="TRUE";
            }
           else if(x.equals("TRUE")&&y.equals("FALSE")){
                sonuc="TRUE";
             }
           else if(x.equals("FALSE")&&y.equals("TRUE")){
                sonuc="TRUE";
             }
           else if(x.equals("FALSE")&&y.equals("FALSE")){
                sonuc="FALSE";
             }
             else if(x.equals("TRUE")&&y.equals("UNKNOWN")){

                 sonuc="TRUE";
             }
              else if(x.equals("UNKNOWN")&&y.equals("TRUE")){

                 sonuc="TRUE";
              }
            else {

                sonuc="UNKNOWN";
             }
    } catch (ParseException e) {
System.err.println("[PARSING ERROR] Invalid input");
        System.exit(0);
    }
{if ("" != null) return sonuc;}
    throw new Error("Missing return statement in function");
  }

  static final public String BoolExpressionAlpha() throws ParseException {String x ="";
    x = BoolTerm();
{if ("" != null) return x;}
    throw new Error("Missing return statement in function");
  }

  static final public String BoolTerm() throws ParseException {String x ="";
String y ="";
String sonuc="";
    try {
      x = BoolTermAlpha();
sonuc=x;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        jj_consume_token(AND);
        y = BoolTermAlpha();
      }
if(x.equals("TRUE")&&y.equals("TRUE")){
            sonuc="TRUE";
        }
        else if(x.equals("TRUE")&&y.equals("FALSE")){
            sonuc="FALSE";
         }
        else if(x.equals("FALSE")&&y.equals("TRUE")){
            sonuc="FALSE";
         }
        else if(x.equals("FALSE")&&y.equals("FALSE")){
            sonuc="FALSE";
         }
         else if(x.equals("FALSE")&&y.equals("UNKNOWN")){
            sonuc="FALSE";
         }
         else if(x.equals("UNKNOWN")&&y.equals("FALSE")){
            sonuc="FALSE";
         }
        else {
            sonuc="UNKNOWN";
         }
    } catch (ParseException e) {
System.err.println("[PARSING ERROR] Invalid input");
    System.exit(0);
    }
{if ("" != null) return sonuc;}
    throw new Error("Missing return statement in function");
  }

  static final public String BoolTermAlpha() throws ParseException {String x ="";
    x = BoolFactor();
{if ("" != null) return x;}
    throw new Error("Missing return statement in function");
  }

// <Bool Factor> → <Bool Primary> | NOT <Bool Primary>
  static final public 
String BoolFactor() throws ParseException {String x ="";
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBR:
      case TRUE:
      case FALSE:
      case UNKNOWN:
      case ID:{
        x = BoolPrimary();
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        x = BoolPrimary();
if(x.equals("TRUE")){
            x="FALSE";
           }
           else if(x.equals("FALSE")){
            x="TRUE";
           }
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.err.println("[PARSING ERROR] Invalid input");
         System.exit(0);
    }
{if ("" != null) return x;}
    throw new Error("Missing return statement in function");
  }

//<Bool Primary> → <Logical Value> | <Variable Name> | (<Bool Expression>)
  static final public 
String BoolPrimary() throws ParseException {String x ="";
Token y =null;
 Node temp=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case UNKNOWN:{
        x = LogicalValue();
        break;
        }
      case ID:{
        x = VariableName();
for(int i=0 ; i<places.size();i++){
                if(places.get(i).isim.equals(x)){
                     temp=places.get(i);
                }
            }
            x=temp.value;
        break;
        }
      case LBR:{
        jj_consume_token(LBR);
        x = BoolExpression();
        jj_consume_token(RBR);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.err.println("[PARSING ERROR] Invalid input");
       System.exit(0);
    }
{if ("" != null) return x;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public OdevTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200000,0x200000,0x20c000,0x400,0x3800,0x20c000,0x20000,0x10000,0x243900,0x203900,};
   }

  /** Constructor with InputStream. */
  public Odev(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Odev(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OdevTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Odev(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OdevTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Odev(OdevTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(OdevTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
class Node {
     String isim;
     String value;
     }
